{"ast":null,"code":"// import React, { useRef, useState } from \"react\";\n// import {\n//   Box,\n//   Typography,\n//   IconButton,\n//   List,\n//   ListItem,\n//   ListItemText,\n//   ListItemIcon,\n//   LinearProgress,\n//   Stack,\n//   Divider,\n//   Paper,\n// } from \"@mui/material\";\n// import {\n//   PlayArrow,\n//   Pause,\n//   SkipNext,\n//   SkipPrevious,\n//   PlayCircleOutline,\n// } from \"@mui/icons-material\";\n\n// export default function AudioPlayer({ tracks, logo }) {\n//   const audioRef = useRef(null);\n//   const [currentTrack, setCurrentTrack] = useState(0);\n//   const [isPlaying, setIsPlaying] = useState(false);\n//   const [progress, setProgress] = useState(0);\n\n//   const togglePlay = () => {\n//     const audio = audioRef.current;\n//     if (audio.paused) {\n//       audio.play();\n//       setIsPlaying(true);\n//     } else {\n//       audio.pause();\n//       setIsPlaying(false);\n//     }\n//   };\n\n//   const handleTimeUpdate = () => {\n//     const audio = audioRef.current;\n//     const percent = (audio.currentTime / audio.duration) * 100;\n//     setProgress(percent);\n//   };\n\n//   const playTrack = (index) => {\n//     setCurrentTrack(index);\n//     setIsPlaying(true);\n//     setTimeout(() => audioRef.current.play(), 100);\n//   };\n\n//   return (\n//     <Paper\n//       sx={{\n//         maxWidth: '100%',\n//         margin: \"auto\",\n//         p: 3,\n//         backgroundColor: \"#000\",\n//         color: \"#fff\",\n//         borderRadius: 2,\n//       }}\n//       elevation={8}\n//     >\n//       <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n//         <Box\n//           component=\"img\"\n//           src={logo}\n//           alt=\"image\"\n//           sx={{ width: 100, height: 100, borderRadius: \"50%\" }}\n//         />\n//         <Box flexGrow={1} gap={1}>\n//           <Typography fontWeight=\"bold\" fontSize={18}>\n//             {tracks[currentTrack].title}\n//           </Typography>\n//           <Typography fontSize={14}>\n//             {tracks[currentTrack].artist}\n//           </Typography>\n//           <Typography fontSize={14} color=\"gray\">\n//             {tracks[currentTrack].otherInfo}\n//           </Typography>\n//         </Box>\n//       </Stack>\n\n//       <Box mt={2}>\n//         <audio\n//           ref={audioRef}\n//           src={tracks[currentTrack].src}\n//           onTimeUpdate={handleTimeUpdate}\n//           onEnded={() => playTrack((currentTrack + 1) % tracks.length)}\n//         />\n\n//         <Stack direction=\"row\" justifyContent=\"center\" spacing={2} mt={1}>\n//           <IconButton onClick={() => playTrack((currentTrack - 1 + tracks.length) % tracks.length)} color=\"inherit\">\n//             <SkipPrevious />\n//           </IconButton>\n//           <IconButton onClick={togglePlay} color=\"inherit\">\n//             {isPlaying ? <Pause /> : <PlayArrow />}\n//           </IconButton>\n//           <IconButton onClick={() => playTrack((currentTrack + 1) % tracks.length)} color=\"inherit\">\n//             <SkipNext />\n//           </IconButton>\n//           <Typography variant=\"caption\" mt={1}>\n//             {tracks[currentTrack].duration}\n//           </Typography>\n//         </Stack>\n\n//         <LinearProgress\n//           variant=\"determinate\"\n//           value={progress}\n//           sx={{ mt: 2, backgroundColor: \"#222\", height: 4 }}\n//         />\n//       </Box>\n\n//       <Divider sx={{ my: 3, borderColor: \"#333\" }} />\n\n//       <List dense sx={{ width: '100%', bgcolor: 'transparent' }}>\n//         {tracks.map((track, index) => (\n//           <ListItem\n//             key={index}\n//             button\n//             onClick={() => playTrack(index)}\n//             sx={{\n//               color: currentTrack === index ? \"#f44336\" : \"#fff\",\n//               borderBottom: \"1px solid #222\",\n//               py: 1,\n//             }}\n//           >\n//             <ListItemIcon sx={{ color: currentTrack === index ? \"#f44336\" : \"#fff\" }}>\n//               {currentTrack === index ? <PlayArrow /> : <PlayCircleOutline />}\n//             </ListItemIcon>\n//             <ListItemText\n//               primary={track.title}\n//               primaryTypographyProps={{\n//                 fontSize: 14,\n//               }}\n//             />\n//             <Typography variant=\"caption\" color={currentTrack === index ? \"error\" : \"gray\"}>\n//               {track.duration}\n//             </Typography>\n//           </ListItem>\n//         ))}\n//       </List>\n//     </Paper>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/passwordis1234/Desktop/website-react/website/src/components/AudioPlayer.jsx"],"sourcesContent":["// import React, { useRef, useState } from \"react\";\n// import {\n//   Box,\n//   Typography,\n//   IconButton,\n//   List,\n//   ListItem,\n//   ListItemText,\n//   ListItemIcon,\n//   LinearProgress,\n//   Stack,\n//   Divider,\n//   Paper,\n// } from \"@mui/material\";\n// import {\n//   PlayArrow,\n//   Pause,\n//   SkipNext,\n//   SkipPrevious,\n//   PlayCircleOutline,\n// } from \"@mui/icons-material\";\n\n\n// export default function AudioPlayer({ tracks, logo }) {\n//   const audioRef = useRef(null);\n//   const [currentTrack, setCurrentTrack] = useState(0);\n//   const [isPlaying, setIsPlaying] = useState(false);\n//   const [progress, setProgress] = useState(0);\n\n//   const togglePlay = () => {\n//     const audio = audioRef.current;\n//     if (audio.paused) {\n//       audio.play();\n//       setIsPlaying(true);\n//     } else {\n//       audio.pause();\n//       setIsPlaying(false);\n//     }\n//   };\n\n//   const handleTimeUpdate = () => {\n//     const audio = audioRef.current;\n//     const percent = (audio.currentTime / audio.duration) * 100;\n//     setProgress(percent);\n//   };\n\n//   const playTrack = (index) => {\n//     setCurrentTrack(index);\n//     setIsPlaying(true);\n//     setTimeout(() => audioRef.current.play(), 100);\n//   };\n\n//   return (\n//     <Paper\n//       sx={{\n//         maxWidth: '100%',\n//         margin: \"auto\",\n//         p: 3,\n//         backgroundColor: \"#000\",\n//         color: \"#fff\",\n//         borderRadius: 2,\n//       }}\n//       elevation={8}\n//     >\n//       <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n//         <Box\n//           component=\"img\"\n//           src={logo}\n//           alt=\"image\"\n//           sx={{ width: 100, height: 100, borderRadius: \"50%\" }}\n//         />\n//         <Box flexGrow={1} gap={1}>\n//           <Typography fontWeight=\"bold\" fontSize={18}>\n//             {tracks[currentTrack].title}\n//           </Typography>\n//           <Typography fontSize={14}>\n//             {tracks[currentTrack].artist}\n//           </Typography>\n//           <Typography fontSize={14} color=\"gray\">\n//             {tracks[currentTrack].otherInfo}\n//           </Typography>\n//         </Box>\n//       </Stack>\n\n//       <Box mt={2}>\n//         <audio\n//           ref={audioRef}\n//           src={tracks[currentTrack].src}\n//           onTimeUpdate={handleTimeUpdate}\n//           onEnded={() => playTrack((currentTrack + 1) % tracks.length)}\n//         />\n\n//         <Stack direction=\"row\" justifyContent=\"center\" spacing={2} mt={1}>\n//           <IconButton onClick={() => playTrack((currentTrack - 1 + tracks.length) % tracks.length)} color=\"inherit\">\n//             <SkipPrevious />\n//           </IconButton>\n//           <IconButton onClick={togglePlay} color=\"inherit\">\n//             {isPlaying ? <Pause /> : <PlayArrow />}\n//           </IconButton>\n//           <IconButton onClick={() => playTrack((currentTrack + 1) % tracks.length)} color=\"inherit\">\n//             <SkipNext />\n//           </IconButton>\n//           <Typography variant=\"caption\" mt={1}>\n//             {tracks[currentTrack].duration}\n//           </Typography>\n//         </Stack>\n\n//         <LinearProgress\n//           variant=\"determinate\"\n//           value={progress}\n//           sx={{ mt: 2, backgroundColor: \"#222\", height: 4 }}\n//         />\n//       </Box>\n\n//       <Divider sx={{ my: 3, borderColor: \"#333\" }} />\n\n//       <List dense sx={{ width: '100%', bgcolor: 'transparent' }}>\n//         {tracks.map((track, index) => (\n//           <ListItem\n//             key={index}\n//             button\n//             onClick={() => playTrack(index)}\n//             sx={{\n//               color: currentTrack === index ? \"#f44336\" : \"#fff\",\n//               borderBottom: \"1px solid #222\",\n//               py: 1,\n//             }}\n//           >\n//             <ListItemIcon sx={{ color: currentTrack === index ? \"#f44336\" : \"#fff\" }}>\n//               {currentTrack === index ? <PlayArrow /> : <PlayCircleOutline />}\n//             </ListItemIcon>\n//             <ListItemText\n//               primary={track.title}\n//               primaryTypographyProps={{\n//                 fontSize: 14,\n//               }}\n//             />\n//             <Typography variant=\"caption\" color={currentTrack === index ? \"error\" : \"gray\"}>\n//               {track.duration}\n//             </Typography>\n//           </ListItem>\n//         ))}\n//       </List>\n//     </Paper>\n//   );\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}