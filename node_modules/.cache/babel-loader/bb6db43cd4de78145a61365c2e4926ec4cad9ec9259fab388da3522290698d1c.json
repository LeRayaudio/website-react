{"ast":null,"code":"var _jsxFileName = \"/Users/passwordis1234/Desktop/website-react/website/src/components/AudioPlayer.jsx\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState } from \"react\";\n// import {\n//   Box,\n//   Typography,\n//   IconButton,\n//   List,\n//   ListItem,\n//   ListItemText,\n//   ListItemIcon,\n//   LinearProgress,\n//   Stack,\n//   Divider,\n//   Paper,\n// } from \"@mui/material\";\n// import {\n//   PlayArrow,\n//   Pause,\n//   SkipNext,\n//   SkipPrevious,\n//   PlayCircleOutline,\n// } from \"@mui/icons-material\";\n\n// export default function AudioPlayer({ tracks, logo }) {\n//   const audioRef = useRef(null);\n//   const [currentTrack, setCurrentTrack] = useState(0);\n//   const [isPlaying, setIsPlaying] = useState(false);\n//   const [progress, setProgress] = useState(0);\n\n//   const togglePlay = () => {\n//     const audio = audioRef.current;\n//     if (audio.paused) {\n//       audio.play();\n//       setIsPlaying(true);\n//     } else {\n//       audio.pause();\n//       setIsPlaying(false);\n//     }\n//   };\n\n//   const handleTimeUpdate = () => {\n//     const audio = audioRef.current;\n//     const percent = (audio.currentTime / audio.duration) * 100;\n//     setProgress(percent);\n//   };\n\n//   const playTrack = (index) => {\n//     setCurrentTrack(index);\n//     setIsPlaying(true);\n//     setTimeout(() => audioRef.current.play(), 100);\n//   };\n\n//   return (\n//     <Paper\n//       sx={{\n//         maxWidth: '100%',\n//         margin: \"auto\",\n//         p: 3,\n//         backgroundColor: \"#000\",\n//         color: \"#fff\",\n//         borderRadius: 2,\n//       }}\n//       elevation={8}\n//     >\n//       <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n//         <Box\n//           component=\"img\"\n//           src={logo}\n//           alt=\"image\"\n//           sx={{ width: 100, height: 100, borderRadius: \"50%\" }}\n//         />\n//         <Box flexGrow={1} gap={1}>\n//           <Typography fontWeight=\"bold\" fontSize={18}>\n//             {tracks[currentTrack].title}\n//           </Typography>\n//           <Typography fontSize={14}>\n//             {tracks[currentTrack].artist}\n//           </Typography>\n//           <Typography fontSize={14} color=\"gray\">\n//             {tracks[currentTrack].otherInfo}\n//           </Typography>\n//         </Box>\n//       </Stack>\n\n//       <Box mt={2}>\n//         <audio\n//           ref={audioRef}\n//           src={tracks[currentTrack].src}\n//           onTimeUpdate={handleTimeUpdate}\n//           onEnded={() => playTrack((currentTrack + 1) % tracks.length)}\n//         />\n\n//         <Stack direction=\"row\" justifyContent=\"center\" spacing={2} mt={1}>\n//           <IconButton onClick={() => playTrack((currentTrack - 1 + tracks.length) % tracks.length)} color=\"inherit\">\n//             <SkipPrevious />\n//           </IconButton>\n//           <IconButton onClick={togglePlay} color=\"inherit\">\n//             {isPlaying ? <Pause /> : <PlayArrow />}\n//           </IconButton>\n//           <IconButton onClick={() => playTrack((currentTrack + 1) % tracks.length)} color=\"inherit\">\n//             <SkipNext />\n//           </IconButton>\n//           <Typography variant=\"caption\" mt={1}>\n//             {tracks[currentTrack].duration}\n//           </Typography>\n//         </Stack>\n\n//         <LinearProgress\n//           variant=\"determinate\"\n//           value={progress}\n//           sx={{ mt: 2, backgroundColor: \"#222\", height: 4 }}\n//         />\n//       </Box>\n\n//       <Divider sx={{ my: 3, borderColor: \"#333\" }} />\n\n//       <List dense sx={{ width: '100%', bgcolor: 'transparent' }}>\n//         {tracks.map((track, index) => (\n//           <ListItem\n//             key={index}\n//             button\n//             onClick={() => playTrack(index)}\n//             sx={{\n//               color: currentTrack === index ? \"#f44336\" : \"#fff\",\n//               borderBottom: \"1px solid #222\",\n//               py: 1,\n//             }}\n//           >\n//             <ListItemIcon sx={{ color: currentTrack === index ? \"#f44336\" : \"#fff\" }}>\n//               {currentTrack === index ? <PlayArrow /> : <PlayCircleOutline />}\n//             </ListItemIcon>\n//             <ListItemText\n//               primary={track.title}\n//               primaryTypographyProps={{\n//                 fontSize: 14,\n//               }}\n//             />\n//             <Typography variant=\"caption\" color={currentTrack === index ? \"error\" : \"gray\"}>\n//               {track.duration}\n//             </Typography>\n//           </ListItem>\n//         ))}\n//       </List>\n//     </Paper>\n//   );\n// }\n\nimport React, { useRef, useState } from \"react\";\nimport { Box, Typography, IconButton, List, ListItem, ListItemText, ListItemIcon, LinearProgress, Stack, Divider, Paper } from \"@mui/material\";\nimport { PlayArrow, Pause, SkipNext, SkipPrevious, PlayCircleOutline } from \"@mui/icons-material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AudioPlayer({\n  tracks,\n  logo\n}) {\n  _s();\n  const audioRef = useRef(null);\n  const [currentTrack, setCurrentTrack] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const togglePlay = () => {\n    const audio = audioRef.current;\n    if (audio.paused) {\n      audio.play();\n      setIsPlaying(true);\n    } else {\n      audio.pause();\n      setIsPlaying(false);\n    }\n  };\n  const handleTimeUpdate = () => {\n    const audio = audioRef.current;\n    const percent = audio.currentTime / audio.duration * 100;\n    setProgress(percent);\n  };\n  const playTrack = index => {\n    if (index === currentTrack) {\n      // Toggle if clicking on the same track\n      togglePlay();\n    } else {\n      setCurrentTrack(index);\n      setIsPlaying(true);\n      setTimeout(() => audioRef.current.play(), 100);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      maxWidth: '100%',\n      margin: \"auto\",\n      p: 3,\n      backgroundColor: \"#000\",\n      color: \"#fff\",\n      borderRadius: 2\n    },\n    elevation: 8,\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      spacing: 2,\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        component: \"img\",\n        src: logo,\n        alt: \"image\",\n        sx: {\n          width: 100,\n          height: 100,\n          borderRadius: \"50%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        flexGrow: 1,\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          spacing: 2,\n          alignItems: \"center\",\n          mb: 1,\n          children: [/*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => playTrack((currentTrack - 1 + tracks.length) % tracks.length),\n            color: \"inherit\",\n            children: /*#__PURE__*/_jsxDEV(SkipPrevious, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: togglePlay,\n            color: \"inherit\",\n            children: isPlaying ? /*#__PURE__*/_jsxDEV(Pause, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 28\n            }, this) : /*#__PURE__*/_jsxDEV(PlayArrow, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => playTrack((currentTrack + 1) % tracks.length),\n            color: \"inherit\",\n            children: /*#__PURE__*/_jsxDEV(SkipNext, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            children: tracks[currentTrack].duration\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          fontWeight: \"bold\",\n          fontSize: 18,\n          children: tracks[currentTrack].title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          fontSize: 14,\n          children: tracks[currentTrack].artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          fontSize: 14,\n          color: \"gray\",\n          children: tracks[currentTrack].otherInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 2,\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        src: tracks[currentTrack].src,\n        onTimeUpdate: handleTimeUpdate,\n        onEnded: () => playTrack((currentTrack + 1) % tracks.length)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress,\n        sx: {\n          mt: 2,\n          backgroundColor: \"#222\",\n          height: 4\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      sx: {\n        my: 3,\n        borderColor: \"#333\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      dense: true,\n      sx: {\n        width: '100%',\n        bgcolor: 'transparent'\n      },\n      children: tracks.map((track, index) => {\n        const isCurrent = currentTrack === index;\n        const isTrackPlaying = isCurrent && isPlaying;\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          button: true,\n          onClick: () => playTrack(index),\n          sx: {\n            color: isCurrent ? \"#f44336\" : \"#fff\",\n            borderBottom: \"1px solid #222\",\n            py: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n            sx: {\n              color: isCurrent ? \"#f44336\" : \"#fff\"\n            },\n            children: isTrackPlaying ? /*#__PURE__*/_jsxDEV(Pause, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 35\n            }, this) : /*#__PURE__*/_jsxDEV(PlayArrow, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: track.title,\n            primaryTypographyProps: {\n              fontSize: 14\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            color: isCurrent ? \"error\" : \"gray\",\n            children: track.duration\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_s(AudioPlayer, \"Qdsfk/GwqB6AJPtUbUkd/aajmUE=\");\n_c = AudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useRef","useState","Box","Typography","IconButton","List","ListItem","ListItemText","ListItemIcon","LinearProgress","Stack","Divider","Paper","PlayArrow","Pause","SkipNext","SkipPrevious","PlayCircleOutline","jsxDEV","_jsxDEV","AudioPlayer","tracks","logo","_s","audioRef","currentTrack","setCurrentTrack","isPlaying","setIsPlaying","progress","setProgress","togglePlay","audio","current","paused","play","pause","handleTimeUpdate","percent","currentTime","duration","playTrack","index","setTimeout","sx","maxWidth","margin","p","backgroundColor","color","borderRadius","elevation","children","direction","spacing","alignItems","component","src","alt","width","height","fileName","_jsxFileName","lineNumber","columnNumber","flexGrow","mb","onClick","length","variant","fontWeight","fontSize","title","artist","otherInfo","mt","ref","onTimeUpdate","onEnded","value","my","borderColor","dense","bgcolor","map","track","isCurrent","isTrackPlaying","button","borderBottom","py","primary","primaryTypographyProps","_c","$RefreshReg$"],"sources":["/Users/passwordis1234/Desktop/website-react/website/src/components/AudioPlayer.jsx"],"sourcesContent":["// import React, { useRef, useState } from \"react\";\n// import {\n//   Box,\n//   Typography,\n//   IconButton,\n//   List,\n//   ListItem,\n//   ListItemText,\n//   ListItemIcon,\n//   LinearProgress,\n//   Stack,\n//   Divider,\n//   Paper,\n// } from \"@mui/material\";\n// import {\n//   PlayArrow,\n//   Pause,\n//   SkipNext,\n//   SkipPrevious,\n//   PlayCircleOutline,\n// } from \"@mui/icons-material\";\n\n\n// export default function AudioPlayer({ tracks, logo }) {\n//   const audioRef = useRef(null);\n//   const [currentTrack, setCurrentTrack] = useState(0);\n//   const [isPlaying, setIsPlaying] = useState(false);\n//   const [progress, setProgress] = useState(0);\n\n//   const togglePlay = () => {\n//     const audio = audioRef.current;\n//     if (audio.paused) {\n//       audio.play();\n//       setIsPlaying(true);\n//     } else {\n//       audio.pause();\n//       setIsPlaying(false);\n//     }\n//   };\n\n//   const handleTimeUpdate = () => {\n//     const audio = audioRef.current;\n//     const percent = (audio.currentTime / audio.duration) * 100;\n//     setProgress(percent);\n//   };\n\n//   const playTrack = (index) => {\n//     setCurrentTrack(index);\n//     setIsPlaying(true);\n//     setTimeout(() => audioRef.current.play(), 100);\n//   };\n\n//   return (\n//     <Paper\n//       sx={{\n//         maxWidth: '100%',\n//         margin: \"auto\",\n//         p: 3,\n//         backgroundColor: \"#000\",\n//         color: \"#fff\",\n//         borderRadius: 2,\n//       }}\n//       elevation={8}\n//     >\n//       <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n//         <Box\n//           component=\"img\"\n//           src={logo}\n//           alt=\"image\"\n//           sx={{ width: 100, height: 100, borderRadius: \"50%\" }}\n//         />\n//         <Box flexGrow={1} gap={1}>\n//           <Typography fontWeight=\"bold\" fontSize={18}>\n//             {tracks[currentTrack].title}\n//           </Typography>\n//           <Typography fontSize={14}>\n//             {tracks[currentTrack].artist}\n//           </Typography>\n//           <Typography fontSize={14} color=\"gray\">\n//             {tracks[currentTrack].otherInfo}\n//           </Typography>\n//         </Box>\n//       </Stack>\n\n//       <Box mt={2}>\n//         <audio\n//           ref={audioRef}\n//           src={tracks[currentTrack].src}\n//           onTimeUpdate={handleTimeUpdate}\n//           onEnded={() => playTrack((currentTrack + 1) % tracks.length)}\n//         />\n\n//         <Stack direction=\"row\" justifyContent=\"center\" spacing={2} mt={1}>\n//           <IconButton onClick={() => playTrack((currentTrack - 1 + tracks.length) % tracks.length)} color=\"inherit\">\n//             <SkipPrevious />\n//           </IconButton>\n//           <IconButton onClick={togglePlay} color=\"inherit\">\n//             {isPlaying ? <Pause /> : <PlayArrow />}\n//           </IconButton>\n//           <IconButton onClick={() => playTrack((currentTrack + 1) % tracks.length)} color=\"inherit\">\n//             <SkipNext />\n//           </IconButton>\n//           <Typography variant=\"caption\" mt={1}>\n//             {tracks[currentTrack].duration}\n//           </Typography>\n//         </Stack>\n\n//         <LinearProgress\n//           variant=\"determinate\"\n//           value={progress}\n//           sx={{ mt: 2, backgroundColor: \"#222\", height: 4 }}\n//         />\n//       </Box>\n\n//       <Divider sx={{ my: 3, borderColor: \"#333\" }} />\n\n//       <List dense sx={{ width: '100%', bgcolor: 'transparent' }}>\n//         {tracks.map((track, index) => (\n//           <ListItem\n//             key={index}\n//             button\n//             onClick={() => playTrack(index)}\n//             sx={{\n//               color: currentTrack === index ? \"#f44336\" : \"#fff\",\n//               borderBottom: \"1px solid #222\",\n//               py: 1,\n//             }}\n//           >\n//             <ListItemIcon sx={{ color: currentTrack === index ? \"#f44336\" : \"#fff\" }}>\n//               {currentTrack === index ? <PlayArrow /> : <PlayCircleOutline />}\n//             </ListItemIcon>\n//             <ListItemText\n//               primary={track.title}\n//               primaryTypographyProps={{\n//                 fontSize: 14,\n//               }}\n//             />\n//             <Typography variant=\"caption\" color={currentTrack === index ? \"error\" : \"gray\"}>\n//               {track.duration}\n//             </Typography>\n//           </ListItem>\n//         ))}\n//       </List>\n//     </Paper>\n//   );\n// }\n\nimport React, { useRef, useState } from \"react\";\nimport {\n  Box,\n  Typography,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  LinearProgress,\n  Stack,\n  Divider,\n  Paper,\n} from \"@mui/material\";\nimport {\n  PlayArrow,\n  Pause,\n  SkipNext,\n  SkipPrevious,\n  PlayCircleOutline,\n} from \"@mui/icons-material\";\n\nexport default function AudioPlayer({ tracks, logo }) {\n  const audioRef = useRef(null);\n  const [currentTrack, setCurrentTrack] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  const togglePlay = () => {\n    const audio = audioRef.current;\n    if (audio.paused) {\n      audio.play();\n      setIsPlaying(true);\n    } else {\n      audio.pause();\n      setIsPlaying(false);\n    }\n  };\n\n  const handleTimeUpdate = () => {\n    const audio = audioRef.current;\n    const percent = (audio.currentTime / audio.duration) * 100;\n    setProgress(percent);\n  };\n\n  const playTrack = (index) => {\n    if (index === currentTrack) {\n      // Toggle if clicking on the same track\n      togglePlay();\n    } else {\n      setCurrentTrack(index);\n      setIsPlaying(true);\n      setTimeout(() => audioRef.current.play(), 100);\n    }\n  };\n\n  return (\n    <Paper\n      sx={{\n        maxWidth: '100%',\n        margin: \"auto\",\n        p: 3,\n        backgroundColor: \"#000\",\n        color: \"#fff\",\n        borderRadius: 2,\n      }}\n      elevation={8}\n    >\n      <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n        <Box\n          component=\"img\"\n          src={logo}\n          alt=\"image\"\n          sx={{ width: 100, height: 100, borderRadius: \"50%\" }}\n        />\n        <Box flexGrow={1}>\n          {/* 🎯 Moved player controls ABOVE the track info */}\n          <Stack direction=\"row\" spacing={2} alignItems=\"center\" mb={1}>\n            <IconButton onClick={() => playTrack((currentTrack - 1 + tracks.length) % tracks.length)} color=\"inherit\">\n              <SkipPrevious />\n            </IconButton>\n            <IconButton onClick={togglePlay} color=\"inherit\">\n              {isPlaying ? <Pause /> : <PlayArrow />}\n            </IconButton>\n            <IconButton onClick={() => playTrack((currentTrack + 1) % tracks.length)} color=\"inherit\">\n              <SkipNext />\n            </IconButton>\n            <Typography variant=\"caption\">\n              {tracks[currentTrack].duration}\n            </Typography>\n          </Stack>\n\n          {/* 🎯 Track info BELOW controls now */}\n          <Typography fontWeight=\"bold\" fontSize={18}>\n            {tracks[currentTrack].title}\n          </Typography>\n          <Typography fontSize={14}>\n            {tracks[currentTrack].artist}\n          </Typography>\n          <Typography fontSize={14} color=\"gray\">\n            {tracks[currentTrack].otherInfo}\n          </Typography>\n        </Box>\n      </Stack>\n\n      <Box mt={2}>\n        <audio\n          ref={audioRef}\n          src={tracks[currentTrack].src}\n          onTimeUpdate={handleTimeUpdate}\n          onEnded={() => playTrack((currentTrack + 1) % tracks.length)}\n        />\n\n        <LinearProgress\n          variant=\"determinate\"\n          value={progress}\n          sx={{ mt: 2, backgroundColor: \"#222\", height: 4 }}\n        />\n      </Box>\n\n      <Divider sx={{ my: 3, borderColor: \"#333\" }} />\n\n      <List dense sx={{ width: '100%', bgcolor: 'transparent' }}>\n        {tracks.map((track, index) => {\n          const isCurrent = currentTrack === index;\n          const isTrackPlaying = isCurrent && isPlaying;\n\n          return (\n            <ListItem\n              key={index}\n              button\n              onClick={() => playTrack(index)}\n              sx={{\n                color: isCurrent ? \"#f44336\" : \"#fff\",\n                borderBottom: \"1px solid #222\",\n                py: 1,\n              }}\n            >\n              <ListItemIcon sx={{ color: isCurrent ? \"#f44336\" : \"#fff\" }}>\n                {isTrackPlaying ? <Pause /> : <PlayArrow />}\n              </ListItemIcon>\n              <ListItemText\n                primary={track.title}\n                primaryTypographyProps={{\n                  fontSize: 14,\n                }}\n              />\n              <Typography variant=\"caption\" color={isCurrent ? \"error\" : \"gray\"}>\n                {track.duration}\n              </Typography>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SACEC,GAAG,EACHC,UAAU,EACVC,UAAU,EACVC,IAAI,EACJC,QAAQ,EACRC,YAAY,EACZC,YAAY,EACZC,cAAc,EACdC,KAAK,EACLC,OAAO,EACPC,KAAK,QACA,eAAe;AACtB,SACEC,SAAS,EACTC,KAAK,EACLC,QAAQ,EACRC,YAAY,EACZC,iBAAiB,QACZ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,eAAe,SAASC,WAAWA,CAAC;EAAEC,MAAM;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EACpD,MAAMC,QAAQ,GAAGxB,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}